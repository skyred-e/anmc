{"version":3,"sources":["Calc.js","App.js","serviceWorker.js","index.js"],"names":["Calc","mainId","this","props","id","mainNum","number","mainData","itemData","mainMats","materials","className","Grid","container","justify","spacing","item","xs","md","sm","Table","TableHead","TableRow","TableCell","TableBody","name","price","map","items","subItem","matid","subNum","subMats","Item","lg","sSubItem","sSubNum","React","Component","App","state","itemId","itemNumber","alighItems","Select","labelId","value","onChange","event","setState","target","style","width","MenuItem","itemError","FormHelperText","TextField","type","InputProps","inputProps","min","label","numberError","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7eae1fc0.chunk.js","sourcesContent":["import React from 'react';\r\nimport itemData from './itemData.json';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nclass Calc extends React.Component{\r\n    render(){\r\n        const mainId = this.props.id;\r\n        const mainNum = this.props.number;\r\n        const mainData = itemData[mainId]\r\n        const mainMats = mainData.materials;\r\n        return(\r\n            <div className=\"Calc\">\r\n                <div>\r\n                <Grid\r\n                container\r\n                justify=\"center\"\r\n                spacing={2}>\r\n                    <Grid item xs={12} md={6} sm={12}>\r\n                <Table className=\"mein-item\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>アイテム名</TableCell>\r\n                        <TableCell>個数</TableCell>\r\n                        <TableCell>龍門幣</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                <TableRow>\r\n                <TableCell>{mainData.name}（ID：{mainId}）</TableCell>\r\n                <TableCell>{mainNum}</TableCell>\r\n                <TableCell>{mainData.price * mainNum}</TableCell>\r\n                </TableRow>\r\n                </TableBody>\r\n                </Table>\r\n                </Grid>\r\n                </Grid>\r\n                </div>\r\n                <Grid container justify=\"center\">\r\n                {mainMats && mainMats.map((items)=>{\r\n                    const subItem = itemData[items.matid];\r\n                    const subNum = items.number * mainNum;\r\n                    const subMats = subItem.materials;\r\n                    return(\r\n\r\n                        <Grid Item xs={12} md={4} lg={3} sm={12}>\r\n                        <Table className=\"materials\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>素材アイテム名</TableCell>\r\n                                    <TableCell>必要個数</TableCell>\r\n                                    <TableCell>龍門幣</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                            <TableRow>\r\n                    <TableCell>{subItem.name}</TableCell>\r\n                    <TableCell>{subNum}</TableCell>\r\n                    <TableCell>{subItem.price * subNum}</TableCell>\r\n                            </TableRow>\r\n                            {subMats && subMats.map((items)=>{\r\n                                const sSubItem = itemData[items.matid];\r\n                                const sSubNum = items.number * subNum;\r\n                                return(\r\n                                    <TableRow>\r\n                                        <TableCell>{sSubItem.name}</TableCell>\r\n                                        <TableCell>{sSubNum}</TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                        </TableBody>\r\n                        </Table>\r\n                        </Grid>\r\n\r\n                    );\r\n                })}\r\n</Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Calc;","import React from 'react';\nimport Calc from './Calc';\nimport itemData from './itemData.json';\nimport Grid from '@material-ui/core/Grid';\nimport FormContlor from '@material-ui/core/FormControl'\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport ImputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      itemId:0,\n      itemNumber:1,\n    };\n  }\n\n\n  render(){\n    const changeItem = (event) =>{\n      this.setState({itemId: event.target.value})\n    }\n\n    const changeNumber = (event) =>{\n      this.setState({itemNumber: event.target.value});\n    }\n\n    return(\n      <div>\n        <h1>アークナイツ加工アイテム計算機</h1>\n        <div className=\"item-form\">\n          <Grid\n          container\n          justify=\"center\"\n          alighItems=\"flex-start\"\n          >\n            <Grid item xs={3}>\n          <FormContlor>\n          <ImputLabel id=\"item-list-label\">アイテムを選択</ImputLabel>\n          <Select\n          labelId=\"item-list-label\"\n          id=\"item-list-select\"\n          value={this.state.itemId}\n          onChange={changeItem}\n          style={{width:'150px'}}\n          >\n            {itemData.map((items)=>{\n              return(\n              <MenuItem value={items.id}>{items.name}</MenuItem>\n              );\n            })}\n          </Select>\n          {this.state.itemError &&\n          (<FormHelperText>アイテムを選択してください。</FormHelperText>)}\n          </FormContlor>\n          </Grid>\n          <Grid item xs={3}>\n          <FormContlor>\n          <TextField\n          id=\"itemNumber\"\n          type=\"number\"\n          InputProps={{inputProps:{min:\"1\"}}}\n          label=\"個数\"\n          onChange={changeNumber}\n          />\n          {this.state.numberError &&\n          (<FormHelperText>個数を入力してください。</FormHelperText>)}\n          </FormContlor>\n          </Grid>\n          </Grid>\n        </div>\n        <Calc\n        id={this.state.itemId}\n        number={this.state.itemNumber}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}